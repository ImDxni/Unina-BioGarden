package com.unina.biogarden.service;

import com.unina.biogarden.dao.*;
import com.unina.biogarden.dto.LotDTO;
import com.unina.biogarden.dto.ProjectDTO;
import com.unina.biogarden.dto.UserDTO;
import com.unina.biogarden.dto.activity.ActivityDTO;
import com.unina.biogarden.dto.activity.HarvestingActivityDTO;
import com.unina.biogarden.dto.activity.IrrigationActivityDTO;
import com.unina.biogarden.dto.activity.SeedingActivityDTO;
import com.unina.biogarden.exceptions.ColtureAlreadyExists;
import com.unina.biogarden.models.Colture;
import com.unina.biogarden.models.Crop;
import com.unina.biogarden.models.Lot;
import com.unina.biogarden.models.Project;
import com.unina.biogarden.models.activity.Activity;
import com.unina.biogarden.models.activity.HarvestingActivity;
import com.unina.biogarden.models.activity.IrrigationActivity;
import com.unina.biogarden.models.activity.SeedingActivity;

import java.util.Collection;

public class ProjectService extends AbstractService<ProjectDTO> {
    private final ProjectDAO projectDao = new ProjectDAO();
    private final LotDAO lotDao = new LotDAO();
    private final CropDAO cropDao = new CropDAO();
    private final ColtureDAO coltureDao = new ColtureDAO();

    private final ActivityDAO activityDAO = new ActivityDAO();


    @Override
    public ProjectDTO insert(ProjectDTO entity) {
        return projectDao.creaProgetto(
                entity.nome(),
                entity.dataInizio(),
                entity.dataFine(),
                entity.idLotto()
        );
    }

    @Override
    public Collection<ProjectDTO> fetchAll() {

        return projectDao.fetchAllProjects();
    }


    public void addActivityToColture(Colture colture, Activity activity) {
        ProjectDTO projectDTO = projectDao.fetchProjectByColtureId(colture.getId());
        if (projectDTO == null) {
            throw new IllegalStateException("Colture non associata a nessun progetto");
        }

        ActivityDTO dto;
        switch(activity.getType()){
            case SEEDING -> {
                SeedingActivity seedingActivity = (SeedingActivity) activity;
                dto = new SeedingActivityDTO(
                        0, // ID will be generated by the database
                        activity.getDate(),
                        activity.getStatus(),
                        seedingActivity.getQuantity(),
                        seedingActivity.getUnit(),
                        colture.getId(),
                        projectDTO.idLotto(),
                        activity.getFarmerID()
                );
            }
            case IRRIGATION -> {
                dto = new IrrigationActivityDTO(
                        0, // ID will be generated by the database
                        activity.getDate(),
                        activity.getStatus(),
                        colture.getId(),
                        projectDTO.idLotto(),
                        activity.getFarmerID()
                );
            }
            case HARVEST -> {
                HarvestingActivity harvestingActivity = (HarvestingActivity) activity;
                dto = new HarvestingActivityDTO(
                        0, // ID will be generated by the database
                        activity.getDate(),
                        activity.getStatus(),
                        harvestingActivity.getPlannedQuantity(),
                        harvestingActivity.getActualQuantity(),
                        harvestingActivity.getUnit(),
                        colture.getId(),
                        projectDTO.idLotto(),
                        activity.getFarmerID()
                );
            }
            default -> {
                throw new IllegalArgumentException("Tipo di attivit√† non supportato: " + activity.getType());
            }
        }

        activityDAO.insertActivity(dto);

    }

    public void addColture(Project project, Crop crop) throws ColtureAlreadyExists {
        coltureDao.addColtura(project.getId(), crop.getId());
    }


    public void createLot(String name, int area) {
        lotDao.createPlot(name, area);
    }

    public void createCrop(String name, int growingTIme) {
        cropDao.creaColtura(name, growingTIme);
    }

    public Collection<Activity> fetchActivities(int coltureId) {
        return activityDAO.fetchActivityByColture(coltureId).stream()
                .map(activity -> switch (activity.getType()) {
                            case SEEDING -> new SeedingActivity(
                                    activity.getId(),
                                    activity.getDate(),
                                    activity.getStatus(),
                                    activity.getFarmerID(),
                                    getFarmerById(activity.getFarmerID()).getFullName(),
                                    ((SeedingActivityDTO)activity).getQuantity(),
                                    ((SeedingActivityDTO)activity).getUnit()
                            );
                            case HARVEST -> new HarvestingActivity(
                                    activity.getId(),
                                    activity.getDate(),
                                    activity.getStatus(),
                                    activity.getFarmerID(),
                                    getFarmerById(activity.getFarmerID()).getFullName(),
                                    ((HarvestingActivityDTO)activity).getExpectedQuantity(),
                                    ((HarvestingActivityDTO)activity).getActualQuantity(),
                                    ((HarvestingActivityDTO)activity).getUnit()
                            );
                            case IRRIGATION -> new IrrigationActivity(
                                    activity.getId(),
                                    activity.getDate(),
                                    activity.getStatus(),
                                    activity.getFarmerID(),
                                    getFarmerById(activity.getFarmerID()).getFullName()
                            );
                        }).toList();
    }

    public void deleteActivity(Activity activity){
        activityDAO.deleteActivity(activity.getId());
    }
    public Collection<Colture> getColtures(int projectId) {
        return coltureDao.fetchColtures(projectId).stream()
                .map(colture -> new Colture(
                        colture.id(), colture.startDate(),
                        colture.status(),
                        new Crop(0, colture.cropName(), 0)
                )).toList();
    }

    public Collection<Crop> getCrops() {
        return cropDao.fetchAllCrop().stream()
                .map(crop -> new Crop(crop.id(), crop.nome(), crop.giorniMaturazione()))
                .toList();
    }

    public Collection<Project> getProjects() {
        Collection<ProjectDTO> projects = projectDao.fetchAllProjects();

        return projects.stream()
                .map(project -> {
                    LotDTO lotDTO = lotDao.getLotById(project.idLotto());
                    return
                            new Project(
                                    project.id(),
                                    project.nome(),
                                    lotDTO.id(),
                                    lotDTO.nome(),
                                    project.dataInizio(),
                                    project.dataFine()
                            );
                }).toList();
    }


    public Collection<Project> fetchProjectByLot(Lot lot) {
        Collection<ProjectDTO> projects = projectDao.fetchProjectsByLot(lot.getId());

        return projects.stream()
                .map(project -> {
                    LotDTO lotDTO = lotDao.getLotById(project.idLotto());
                    return
                            new Project(
                                    project.id(),
                                    project.nome(),
                                    lotDTO.id(),
                                    lotDTO.nome(),
                                    project.dataInizio(),
                                    project.dataFine()
                            );
                }).toList();
    }

    public Project fetchProjectById(int projectId) {
        ProjectDTO project = projectDao.fetchProjectById(projectId);
        Lot lot = new Lot(lotDao.getLotById(project.idLotto()));

        return new Project(
                project.id(),
                project.nome(),
                lot.getId(),
                lot.getName(),
                project.dataInizio(),
                project.dataFine()
        );
    }

    public Collection<Lot> fetchAllLots() {
        Collection<LotDTO> lots = lotDao.getAllLots();

        return lots.stream()
                .map(Lot::new)
                .toList();

    }

    private UserDTO getFarmerById(int farmerId) {
        return UserService.getUsers().stream()
                .filter(user -> user.id() == farmerId)
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Farmer not found with ID: " + farmerId));
    }
}
